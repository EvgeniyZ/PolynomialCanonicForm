//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Polynomial.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

namespace Polynomial.WebApi.Traversing
{
	/// <summary>
	/// This interface defines a complete listener for a parse tree produced by
	/// <see cref="PolynomialParser"/>.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
	[System.CLSCompliant(false)]
	public interface IPolynomialListener : IParseTreeListener {
		/// <summary>
		/// Enter a parse tree produced by the <c>addSub</c>
		/// labeled alternative in <see cref="PolynomialParser.polynomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void EnterAddSub([NotNull] PolynomialParser.AddSubContext context);
		/// <summary>
		/// Exit a parse tree produced by the <c>addSub</c>
		/// labeled alternative in <see cref="PolynomialParser.polynomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void ExitAddSub([NotNull] PolynomialParser.AddSubContext context);
		/// <summary>
		/// Enter a parse tree produced by the <c>parens</c>
		/// labeled alternative in <see cref="PolynomialParser.polynomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void EnterParens([NotNull] PolynomialParser.ParensContext context);
		/// <summary>
		/// Exit a parse tree produced by the <c>parens</c>
		/// labeled alternative in <see cref="PolynomialParser.polynomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void ExitParens([NotNull] PolynomialParser.ParensContext context);
		/// <summary>
		/// Enter a parse tree produced by the <c>realMonomial</c>
		/// labeled alternative in <see cref="PolynomialParser.monomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void EnterRealMonomial([NotNull] PolynomialParser.RealMonomialContext context);
		/// <summary>
		/// Exit a parse tree produced by the <c>realMonomial</c>
		/// labeled alternative in <see cref="PolynomialParser.monomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void ExitRealMonomial([NotNull] PolynomialParser.RealMonomialContext context);
		/// <summary>
		/// Enter a parse tree produced by the <c>double</c>
		/// labeled alternative in <see cref="PolynomialParser.monomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void EnterDouble([NotNull] PolynomialParser.DoubleContext context);
		/// <summary>
		/// Exit a parse tree produced by the <c>double</c>
		/// labeled alternative in <see cref="PolynomialParser.monomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void ExitDouble([NotNull] PolynomialParser.DoubleContext context);
		/// <summary>
		/// Enter a parse tree produced by the <c>integer</c>
		/// labeled alternative in <see cref="PolynomialParser.monomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void EnterInteger([NotNull] PolynomialParser.IntegerContext context);
		/// <summary>
		/// Exit a parse tree produced by the <c>integer</c>
		/// labeled alternative in <see cref="PolynomialParser.monomial"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		void ExitInteger([NotNull] PolynomialParser.IntegerContext context);
	}
}
