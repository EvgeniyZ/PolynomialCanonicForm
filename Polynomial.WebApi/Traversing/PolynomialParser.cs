//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Polynomial.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class PolynomialParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, INT=4, DEC=5, VAR=6, SIGN=7, WHITESPACE=8;
	public const int
		RULE_canonical = 0, RULE_polynomial = 1, RULE_monomial = 2, RULE_coefficient = 3;
	public static readonly string[] ruleNames = {
		"canonical", "polynomial", "monomial", "coefficient"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INT", "DEC", "VAR", "SIGN", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Polynomial.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PolynomialParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PolynomialParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PolynomialParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CanonicalContext : ParserRuleContext {
		public CanonicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_canonical; } }
	 
		public CanonicalContext() { }
		public virtual void CopyFrom(CanonicalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CanonicalPolynomContext : CanonicalContext {
		public PolynomialContext[] polynomial() {
			return GetRuleContexts<PolynomialContext>();
		}
		public PolynomialContext polynomial(int i) {
			return GetRuleContext<PolynomialContext>(i);
		}
		public CanonicalPolynomContext(CanonicalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterCanonicalPolynom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitCanonicalPolynom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCanonicalPolynom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CanonicalContext canonical() {
		CanonicalContext _localctx = new CanonicalContext(Context, State);
		EnterRule(_localctx, 0, RULE_canonical);
		int _la;
		try {
			_localctx = new CanonicalPolynomContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8; polynomial();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << INT) | (1L << DEC) | (1L << VAR) | (1L << SIGN))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PolynomialContext : ParserRuleContext {
		public PolynomialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_polynomial; } }
	 
		public PolynomialContext() { }
		public virtual void CopyFrom(PolynomialContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParensContext : PolynomialContext {
		public ITerminalNode SIGN() { return GetToken(PolynomialParser.SIGN, 0); }
		public PolynomialContext[] polynomial() {
			return GetRuleContexts<PolynomialContext>();
		}
		public PolynomialContext polynomial(int i) {
			return GetRuleContext<PolynomialContext>(i);
		}
		public ParensContext(PolynomialContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MonomContext : PolynomialContext {
		public MonomialContext monomial() {
			return GetRuleContext<MonomialContext>(0);
		}
		public MonomContext(PolynomialContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterMonom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitMonom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PolynomialContext polynomial() {
		PolynomialContext _localctx = new PolynomialContext(Context, State);
		EnterRule(_localctx, 2, RULE_polynomial);
		int _la;
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ParensContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 14;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SIGN) {
					{
					State = 13; Match(SIGN);
					}
				}

				State = 16; Match(T__0);
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << INT) | (1L << DEC) | (1L << VAR) | (1L << SIGN))) != 0)) {
					{
					{
					State = 17; polynomial();
					}
					}
					State = 22;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 23; Match(T__1);
				}
				break;
			case 2:
				_localctx = new MonomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 24; monomial();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonomialContext : ParserRuleContext {
		public MonomialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monomial; } }
	 
		public MonomialContext() { }
		public virtual void CopyFrom(MonomialContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberContext : MonomialContext {
		public CoefficientContext coefficient() {
			return GetRuleContext<CoefficientContext>(0);
		}
		public ITerminalNode SIGN() { return GetToken(PolynomialParser.SIGN, 0); }
		public NumberContext(MonomialContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddendContext : MonomialContext {
		public ITerminalNode VAR() { return GetToken(PolynomialParser.VAR, 0); }
		public ITerminalNode SIGN() { return GetToken(PolynomialParser.SIGN, 0); }
		public CoefficientContext coefficient() {
			return GetRuleContext<CoefficientContext>(0);
		}
		public ITerminalNode INT() { return GetToken(PolynomialParser.INT, 0); }
		public AddendContext(MonomialContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterAddend(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitAddend(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonomialContext monomial() {
		MonomialContext _localctx = new MonomialContext(Context, State);
		EnterRule(_localctx, 4, RULE_monomial);
		int _la;
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new AddendContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SIGN) {
					{
					State = 27; Match(SIGN);
					}
				}

				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INT || _la==DEC) {
					{
					State = 30; coefficient();
					}
				}

				State = 33; Match(VAR);
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 34; Match(T__2);
					State = 35; Match(INT);
					}
				}

				}
				break;
			case 2:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SIGN) {
					{
					State = 38; Match(SIGN);
					}
				}

				State = 41; coefficient();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoefficientContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(PolynomialParser.INT, 0); }
		public ITerminalNode DEC() { return GetToken(PolynomialParser.DEC, 0); }
		public CoefficientContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coefficient; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterCoefficient(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitCoefficient(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoefficient(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoefficientContext coefficient() {
		CoefficientContext _localctx = new CoefficientContext(Context, State);
		EnterRule(_localctx, 6, RULE_coefficient);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '\x31', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x6', '\x2', '\f', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\r', 
		'\x3', '\x3', '\x5', '\x3', '\x11', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\x15', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x18', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1C', '\n', '\x3', 
		'\x3', '\x4', '\x5', '\x4', '\x1F', '\n', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\"', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\'', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '*', '\n', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '-', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x2', '\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\x3', 
		'\x3', '\x2', '\x6', '\a', '\x2', '\x35', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', '\x2', 
		'\x2', '\x2', '\b', '.', '\x3', '\x2', '\x2', '\x2', '\n', '\f', '\x5', 
		'\x4', '\x3', '\x2', '\v', '\n', '\x3', '\x2', '\x2', '\x2', '\f', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\v', '\x3', '\x2', '\x2', '\x2', '\r', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\xE', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x11', '\a', '\t', '\x2', '\x2', '\x10', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x12', '\x16', '\a', '\x3', '\x2', 
		'\x2', '\x13', '\x15', '\x5', '\x4', '\x3', '\x2', '\x14', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x18', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x19', '\x3', '\x2', '\x2', '\x2', '\x18', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1C', '\a', '\x4', '\x2', '\x2', '\x1A', 
		'\x1C', '\x5', '\x6', '\x4', '\x2', '\x1B', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1F', '\a', '\t', '\x2', '\x2', '\x1E', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '!', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x5', '\b', 
		'\x5', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '&', 
		'\a', '\b', '\x2', '\x2', '$', '%', '\a', '\x5', '\x2', '\x2', '%', '\'', 
		'\a', '\x6', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\'', '-', '\x3', '\x2', '\x2', '\x2', 
		'(', '*', '\a', '\t', '\x2', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', '-', '\x5', '\b', '\x5', '\x2', ',', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', ',', ')', '\x3', '\x2', '\x2', '\x2', '-', '\a', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\t', '\x2', '\x2', '\x2', '/', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\r', '\x10', '\x16', '\x1B', '\x1E', '!', '&', ')', 
		',',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
