//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Polynomial.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class PolynomialParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, INT=4, DOUBLE=5, VAR=6, ADD=7, SUB=8, WHITESPACE=9;
	public const int
		RULE_polynomial = 0;
	public static readonly string[] ruleNames = {
		"polynomial"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'^'", null, null, null, "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INT", "DOUBLE", "VAR", "ADD", "SUB", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Polynomial.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PolynomialParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PolynomialParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PolynomialParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PolynomialContext : ParserRuleContext {
		public PolynomialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_polynomial; } }
	 
		public PolynomialContext() { }
		public virtual void CopyFrom(PolynomialContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParensContext : PolynomialContext {
		public PolynomialContext polynomial() {
			return GetRuleContext<PolynomialContext>(0);
		}
		public ParensContext(PolynomialContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MonomialContext : PolynomialContext {
		public ITerminalNode VAR() { return GetToken(PolynomialParser.VAR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(PolynomialParser.DOUBLE, 0); }
		public ITerminalNode[] INT() { return GetTokens(PolynomialParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(PolynomialParser.INT, i);
		}
		public MonomialContext(PolynomialContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterMonomial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitMonomial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonomial(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleContext : PolynomialContext {
		public ITerminalNode DOUBLE() { return GetToken(PolynomialParser.DOUBLE, 0); }
		public DoubleContext(PolynomialContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterDouble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitDouble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : PolynomialContext {
		public IToken op;
		public PolynomialContext[] polynomial() {
			return GetRuleContexts<PolynomialContext>();
		}
		public PolynomialContext polynomial(int i) {
			return GetRuleContext<PolynomialContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(PolynomialParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(PolynomialParser.SUB, 0); }
		public AddSubContext(PolynomialContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerContext : PolynomialContext {
		public ITerminalNode INT() { return GetToken(PolynomialParser.INT, 0); }
		public IntegerContext(PolynomialContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PolynomialContext polynomial() {
		return polynomial(0);
	}

	private PolynomialContext polynomial(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PolynomialContext _localctx = new PolynomialContext(Context, _parentState);
		PolynomialContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_polynomial, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 3; Match(T__0);
				State = 4; polynomial(0);
				State = 5; Match(T__1);
				}
				break;
			case 2:
				{
				_localctx = new MonomialContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLE) {
					{
					State = 7; Match(DOUBLE);
					}
				}

				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INT) {
					{
					State = 10; Match(INT);
					}
				}

				State = 13; Match(VAR);
				State = 16;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 14; Match(T__2);
					State = 15; Match(INT);
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new DoubleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 18; Match(DOUBLE);
				}
				break;
			case 4:
				{
				_localctx = new IntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19; Match(INT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 27;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AddSubContext(new PolynomialContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_polynomial);
					State = 22;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 23;
					((AddSubContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==SUB) ) {
						((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 24; polynomial(6);
					}
					} 
				}
				State = 29;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return polynomial_sempred((PolynomialContext)_localctx, predIndex);
		}
		return true;
	}
	private bool polynomial_sempred(PolynomialContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '!', '\x4', '\x2', '\t', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\v', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\xE', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x13', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x17', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1C', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x1F', '\v', '\x2', '\x3', '\x2', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x2', '\x3', '\x3', '\x2', '\t', '\n', '\x2', '&', 
		'\x2', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '\x5', '\b', '\x2', 
		'\x1', '\x2', '\x5', '\x6', '\a', '\x3', '\x2', '\x2', '\x6', '\a', '\x5', 
		'\x2', '\x2', '\x2', '\a', '\b', '\a', '\x4', '\x2', '\x2', '\b', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\v', '\a', '\a', '\x2', '\x2', '\n', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\n', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\r', '\x3', '\x2', '\x2', '\x2', '\f', '\xE', '\a', '\x6', '\x2', 
		'\x2', '\r', '\f', '\x3', '\x2', '\x2', '\x2', '\r', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xF', '\x3', '\x2', '\x2', '\x2', '\xF', '\x12', 
		'\a', '\b', '\x2', '\x2', '\x10', '\x11', '\a', '\x5', '\x2', '\x2', '\x11', 
		'\x13', '\a', '\x6', '\x2', '\x2', '\x12', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x17', '\a', '\a', '\x2', '\x2', '\x15', 
		'\x17', '\a', '\x6', '\x2', '\x2', '\x16', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\n', '\x3', '\x2', '\x2', '\x2', '\x16', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\f', '\a', '\x2', 
		'\x2', '\x19', '\x1A', '\t', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x5', 
		'\x2', '\x2', '\b', '\x1B', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\a', 
		'\n', '\r', '\x12', '\x16', '\x1D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
